package com.github.pvtitov.simplewishlist.domain.data

import com.github.pvtitov.simplewishlist.domain.data.model.AccountData

/**
 * Всего три метода - чтение и запись всей информации по своему аккаунту и чтение информации по
 * чужому аккаунту.
 * Интерфейс максимально общий, простой, не навязывающий никакой особой логики.
 * С помощью методов можно создать новый аккаунт на конкретном источнике данный, причем
 * проверка того, существует ли уже такаой аккаунт, лежит на реализации источника. Можно обновить
 * данные: создать новое желание или обновить имеющееся, добавить друга, отменить обещание -
 * обновляются все данные разом. Так же и чтение данных происходит - загружаются все данные по
 * аккаунту.
 * Это может быть не оптимально, не удобно. Но данный интерфейс не нужно расширять. В крайнем случае
 * его можно будет пометить @Deprecated, если он точно не будет нужен. Для более тонкой работы с
 * данными нужно будет рядом объявить новый альтернативный интерфейс.
 * Данный интерфейс, во-первых, простой, во-вторых, он подходит отлично, как кажется, подходит для
 * реализации явного ручного управления данными, когда все, что происходит, происходит по явной
 * команде пользователя, особенно сетевые запросы. Например, никакие данные не загрузятся и не
 * отправятся на сервер, пока пользователь не сделает pull-to-refresh или не нажмёт кнопку, даже при
 * старте приложения ничего само по себе не загрузится. Но данной момент хочется сделать так.
 */
interface AllAccountsDataSource {
    suspend fun getMyAccountData(): AccountData
    suspend fun setMyAccountData(data: AccountData): Boolean

    /**
     * @return null если аккаунт не найден или найдено больше одного аккаунта по запросу [login].
     * Предполагается, что нужно знать точный логин своего друга.
     */
    suspend fun getAccountData(login: String): AccountData?
}